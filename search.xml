<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>php函数</title>
    <url>/2020/10/03/php%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="PHP函数"><a href="#PHP函数" class="headerlink" title="PHP函数"></a>PHP函数</h1><h2 id="addcslashes-—-以-C-语言风格使用反斜线转义字符串中的字符"><a href="#addcslashes-—-以-C-语言风格使用反斜线转义字符串中的字符" class="headerlink" title="addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符"></a>addcslashes — 以 C 语言风格使用反斜线转义字符串中的字符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> addcslashes(<span class="string">&#x27;foo[]&#x27;</span>,<span class="string">&#x27;A..z&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/27.PNG" alt="27"></p>
<a id="more"></a>



<h2 id="addslashes-—-使用反斜线引用字符串"><a href="#addslashes-—-使用反斜线引用字符串" class="headerlink" title="addslashes — 使用反斜线引用字符串"></a>addslashes — 使用反斜线引用字符串</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> addslashes(<span class="string">&quot;fool&#x27;man&quot;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/29.PNG" alt="29"></p>
<h2 id="empty-—-检查一个变量是否为空"><a href="#empty-—-检查一个变量是否为空" class="headerlink" title="empty — 检查一个变量是否为空"></a>empty — 检查一个变量是否为空</h2><h2 id="isset-—-检测变量是否已设置并且非-NULL"><a href="#isset-—-检测变量是否已设置并且非-NULL" class="headerlink" title="isset — 检测变量是否已设置并且非 NULL"></a>isset — 检测变量是否已设置并且非 <strong><code>NULL</code></strong></h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$var = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($var))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$var</span> is either 0,empty, or not set at all&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($var))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$var</span> is set even thouth it is empty&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/30.PNG" alt="30"></p>
<h2 id="htmlentities-—-将字符转换为-HTML-转义字符"><a href="#htmlentities-—-将字符转换为-HTML-转义字符" class="headerlink" title="htmlentities — 将字符转换为 HTML 转义字符"></a>htmlentities — 将字符转换为 HTML 转义字符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str=<span class="string">&quot;A &#x27;qute&#x27; is &lt;b&gt; bold &lt;/b&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> htmlentities($str).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span>		</span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/31.PNG" alt="31"></p>
<h2 id="htmlspecialchars-—-将特殊字符转换为-HTML-实体"><a href="#htmlspecialchars-—-将特殊字符转换为-HTML-实体" class="headerlink" title="htmlspecialchars — 将特殊字符转换为 HTML 实体"></a>htmlspecialchars — 将特殊字符转换为 HTML 实体</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$new = (<span class="string">&quot;&lt;a href=&#x27;test&#x27;&gt;Test&lt;/a&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> $new.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> htmlspecialchars($new);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/32.PNG" alt="32"></p>
<h2 id="foreach—-语法结构提供了遍历数组的简单方式"><a href="#foreach—-语法结构提供了遍历数组的简单方式" class="headerlink" title="foreach—  语法结构提供了遍历数组的简单方式"></a>foreach—  语法结构提供了遍历数组的简单方式</h2><p>有两种语法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line">$var = <span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> ($var <span class="keyword">as</span> $key)&#123;</span><br><span class="line">	<span class="keyword">echo</span> $key.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($var <span class="keyword">as</span> $key =&gt; $value )&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$key</span>&quot;</span>.<span class="string">&quot;-&gt;&quot;</span>.<span class="string">&quot;<span class="subst">$value</span>&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/foreach.PNG" alt="foreach"></p>
<h2 id="strip-tags-—-从字符串中去除-HTML-和-PHP-标记"><a href="#strip-tags-—-从字符串中去除-HTML-和-PHP-标记" class="headerlink" title="strip_tags — 从字符串中去除 HTML 和 PHP 标记"></a>strip_tags — 从字符串中去除 HTML 和 PHP 标记</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$new = (<span class="string">&quot;&lt;a href=&#x27;htest&#x27;&gt;Test&lt;/a&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> strip_tags($new).<span class="string">&quot;&lt;br&gt;&quot;</span>;			<span class="comment">//过滤标签</span></span><br><span class="line"><span class="keyword">echo</span> strip_tags($new,<span class="string">&#x27;&lt;a&gt;&#x27;</span>);	<span class="comment">//允许&lt;a&gt;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/33.PNG" alt="33"></p>
<h2 id="strstr-—-查找字符串的首次出现"><a href="#strstr-—-查找字符串的首次出现" class="headerlink" title="strstr — 查找字符串的首次出现"></a>strstr — 查找字符串的首次出现</h2><h2 id="stristr-—-strstr-函数的忽略大小写版本"><a href="#stristr-—-strstr-函数的忽略大小写版本" class="headerlink" title="stristr — strstr() 函数的忽略大小写版本"></a>stristr — <a href="mk:@MSITStore:C:\Users\Administrator\Desktop\PHP\PHP中文手册.chm::/res/function.strstr.html">strstr()</a> 函数的忽略大小写版本</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$email = <span class="string">&#x27;NAME@examle.com&#x27;</span>;</span><br><span class="line">$domain = strstr($email, <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line">$domain1 = stristr($email,<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $domain.<span class="string">&quot;&lt;br&gt;&quot;</span>.$domain1;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/34.PNG" alt="34"></p>
<h2 id="strpos-—-查找字符串首次出现的位置"><a href="#strpos-—-查找字符串首次出现的位置" class="headerlink" title="strpos — 查找字符串首次出现的位置"></a>strpos — 查找字符串首次出现的位置</h2><h2 id="stripos-—-strpos-函数的忽略大小写版本"><a href="#stripos-—-strpos-函数的忽略大小写版本" class="headerlink" title="stripos — strpos()函数的忽略大小写版本"></a>stripos — strpos()函数的忽略大小写版本</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$newstring = <span class="string">&#x27;abcdef aBcdef&#x27;</span>;</span><br><span class="line">$pos = strpos($newstring,<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line">$pos1 = stripos($newstring,<span class="string">&#x27;B&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> $pos.<span class="string">&quot;&lt;br&gt;&quot;</span>.$pos1;		<span class="comment">//从0开始</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/35.PNG" alt="35"></p>
<h2 id="htmlspecialchars-decode-—-将特殊的-HTML-实体转换回普通字符"><a href="#htmlspecialchars-decode-—-将特殊的-HTML-实体转换回普通字符" class="headerlink" title="htmlspecialchars_decode — 将特殊的 HTML 实体转换回普通字符"></a>htmlspecialchars_decode — 将特殊的 HTML 实体转换回普通字符</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">&quot;&lt;p&gt;this -&amp;gt; &amp;quot;&lt;/p&gt;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> htmlspecialchars_decode($str);</span><br><span class="line"><span class="comment">// 注意，这里的引号不会被转换</span></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/36.PNG" alt="36"></p>
<h2 id="md5-—-计算字符串的-MD5-散列值"><a href="#md5-—-计算字符串的-MD5-散列值" class="headerlink" title="md5 — 计算字符串的 MD5 散列值"></a>md5 — 计算字符串的 MD5 散列值</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">&#x27;apple&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> md5($str);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/37.PNG" alt="37"></p>
<h2 id="str-replace-函数以其他字符替换字符串中的一些字符（区分大小写）。"><a href="#str-replace-函数以其他字符替换字符串中的一些字符（区分大小写）。" class="headerlink" title="str_replace() 函数以其他字符替换字符串中的一些字符（区分大小写）。"></a>str_replace() 函数以其他字符替换字符串中的一些字符（区分大小写）。</h2><h2 id="str-replace-all-字符串替换，同str-replace"><a href="#str-replace-all-字符串替换，同str-replace" class="headerlink" title="str_replace_all: 字符串替换，同str_replace"></a>str_replace_all: 字符串替换，同str_replace</h2><h2 id="str-irepalce-—-str-replace-的忽略大小写版本"><a href="#str-irepalce-—-str-replace-的忽略大小写版本" class="headerlink" title="str_irepalce — str_replace()的忽略大小写版本"></a>str_irepalce — str_replace()的忽略大小写版本</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> str_replace(<span class="string">&quot;people&quot;</span>,<span class="string">&quot;shanghai&quot;</span>,<span class="string">&quot;Hello People!&quot;</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> str_ireplace(<span class="string">&quot;people&quot;</span>,<span class="string">&quot;shanghai&quot;</span>,<span class="string">&quot;Hello People!&quot;</span>);		<span class="comment">//people 替换shanghai</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/38.PNG" alt="38"></p>
<h2 id="is-numeric-—-检测变量是否为数字或数字字符串"><a href="#is-numeric-—-检测变量是否为数字或数字字符串" class="headerlink" title="is_numeric — 检测变量是否为数字或数字字符串"></a>is_numeric — 检测变量是否为数字或数字字符串</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$name1=<span class="number">123</span>;</span><br><span class="line">$name2=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">$name3=abc;</span><br><span class="line"><span class="keyword">if</span> (is_numeric($name1))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$name1</span>&quot;</span>. <span class="string">&quot; 是数字&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$name1</span>&quot;</span>. <span class="string">&quot;不是数字&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_numeric($name2))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$name2</span>&quot;</span>.<span class="string">&quot; 是数字&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$name2</span>&quot;</span>.<span class="string">&quot; 不是数字&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (is_numeric($name3))&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$name3</span>&quot;</span>.<span class="string">&quot; 是数字&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$name3</span>&quot;</span>.<span class="string">&quot; 不是数字&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/39.PNG" alt="39"></p>
<h2 id="str-split-—-将字符串转换为数组"><a href="#str-split-—-将字符串转换为数组" class="headerlink" title="str_split — 将字符串转换为数组"></a>str_split — 将字符串转换为数组</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line">$arr = str_split($str);</span><br><span class="line">$arr2 = str_split($str,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">print_r($arr);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">print_r($arr2);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/40.PNG" alt="40"></p>
<h2 id="substr-—-返回字符串的子串"><a href="#substr-—-返回字符串的子串" class="headerlink" title="substr — 返回字符串的子串"></a>substr — 返回字符串的子串</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$str = <span class="string">&#x27;abcdef&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> substr(<span class="string">&quot;<span class="subst">$str</span>&quot;</span>,<span class="number">1</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> substr(<span class="string">&quot;<span class="subst">$str</span>&quot;</span>,<span class="number">5</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> substr(<span class="string">&quot;<span class="subst">$str</span>&quot;</span>,<span class="number">-1</span>).<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/10/03/php%E5%87%BD%E6%95%B0/41.PNG" alt="41"></p>
<p><code>require -- 文件包含</code></p>
<p><code>include -- 文件包含</code></p>
<p><code>require 和 include</code> 几乎完全一样，require报错时停止，inlcude报错时只产生警告.</p>
<h3 id="escapeshellarg-—-把字符串转码为可以在-shell-命令里使用的参数"><a href="#escapeshellarg-—-把字符串转码为可以在-shell-命令里使用的参数" class="headerlink" title="escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数"></a>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</h3><h3 id="escapeshellcmd-—-shell-元字符转义"><a href="#escapeshellcmd-—-shell-元字符转义" class="headerlink" title="escapeshellcmd — shell 元字符转义"></a>escapeshellcmd — shell 元字符转义</h3><p><strong>print</strong> 实际上不是函数（而是语言结构），所以可以不用圆括号包围参数列表。   </p>
<p>和 <em>echo</em> 最主要的区别：    <em>print</em> 仅支持一个参数，并总是返回 1。 </p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP,函数</tag>
      </tags>
  </entry>
  <entry>
    <title>php基础</title>
    <url>/2020/09/26/php%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="开始："><a href="#开始：" class="headerlink" title="开始："></a>开始：</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&#x27;hello,world&#x27;</span>;a</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span>表示程序开始，<span class="meta">?&gt;</span>表示程序结束。</span><br><span class="line">每行代码必须以分号;结尾。</span><br><span class="line"><span class="keyword">echo</span>是php的输出函数。</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h3 id="变量："><a href="#变量：" class="headerlink" title="变量："></a>变量：</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">定义：$变量名=值；例如：<span class="variable">$demo</span> = 1;</span><br><span class="line">变量命名规则 ：以字母或者下划线开头， 后面跟任意数量（含0个）的字母，数字和下划线</span><br><span class="line">基本操作：①赋值:<span class="variable">$demo</span> = 1;</span><br><span class="line">		②取值:<span class="variable">$demo1</span> = <span class="variable">$demo</span>;<span class="built_in">echo</span> <span class="variable">$demo1</span>;</span><br><span class="line">		③判断变量是否存在。存在返回值1，不存在返回值空。</span><br></pre></td></tr></table></figure>

<p><img src="https://ey404.github.io/2020/09/26/img/1.png" alt="1"></p>
<h6 id="变量的传值方式：只有2种-gt-值传递和-引用传递"><a href="#变量的传值方式：只有2种-gt-值传递和-引用传递" class="headerlink" title="变量的传值方式：只有2种=&gt; 值传递和 引用传递"></a>变量的传值方式：只有2种=&gt; 值传递和 引用传递</h6><h6 id="值传递："><a href="#值传递：" class="headerlink" title="值传递："></a>值传递：</h6><h6 id="两个变量值相等，且互相独立，互不影响"><a href="#两个变量值相等，且互相独立，互不影响" class="headerlink" title="两个变量值相等，且互相独立，互不影响"></a>两个变量值相等，且互相独立，互不影响</h6><p><img src="/2020/09/26/php%E5%9F%BA%E7%A1%80/7.png" alt="3"></p>
<h6 id="引用传递："><a href="#引用传递：" class="headerlink" title="引用传递："></a>引用传递：</h6><p>两个变量指向一个数据空间，对其中任何一个变量操作，改变了数据，另一个变量也会更改。</p>
<p><img src="/2020/09/26/php%E5%9F%BA%E7%A1%80/4-1577062402843.png" alt="4"></p>
<p> <strong>预定义变量：php 中预先定义好的变量。</strong></p>
<p>主要有：**$_GET, $_POST, $_REQUEST, $_SERVER, $GLOBALS ， 均是 数组**</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">$_GET 一个包含所有PHP 从客户浏览器接受的GET变量的数组</span><br><span class="line"></span><br><span class="line">$_POST 一个包含所有PHP 从客户浏览器接受的POST变量的数组</span><br><span class="line">用法与GET一样 $data = $_POST[&#x27;数据名称&#x27;]；</span><br><span class="line"></span><br><span class="line">$_REQUEST $_GET变量和$_POST变量数据的“合集”：即，它里面同时存储了这两种数据。</span><br><span class="line">用法与POST 和 GET 一样  $data =$_REQUEST[‘数据项名称’];</span><br><span class="line"></span><br><span class="line">$_SERVER 一个存放Web服务器变量的数组 ，它代表在一次浏览网页的过程中的浏览器端的一些信息或服务器端的一些信息</span><br><span class="line">可以通过 print_r($_SERVER)查看内容：</span><br><span class="line"></span><br><span class="line">$GLOBALS 一个存储了我们自己定义的所有“全局变量”的数组</span><br><span class="line">$GLOBALS[&#x27;全局变量名&#x27;]</span><br></pre></td></tr></table></figure>





<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串:"></a>字符串:</h3><h5 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h5><p>变量和转义的序列都不会进行转义</p>
<h5 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h5><p>PHP会处理双引号括起来的字符串、变量以及转义序列</p>
<p><img src="/2020/09/26/php%E5%9F%BA%E7%A1%80/5.png" alt="5"></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>php面向对象</title>
    <url>/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="PHP面向对象"><a href="#PHP面向对象" class="headerlink" title="PHP面向对象"></a>PHP面向对象</h1><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4><h5 id="1、类的概念"><a href="#1、类的概念" class="headerlink" title="1、类的概念"></a>1、类的概念</h5><p>✔类是由相同属性和方法构成</p>
<p>✔一个类可以产生千千万万个对象</p>
<h5 id><a href="#" class="headerlink" title></a><a id="more"></a></h5><p>2、对象的概念</p>
<p>✔对象也是属性(特征)和方法(行为)构成的</p>
<p>✔先有类，后有对象</p>
<h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><h5 id="1、举例说明"><a href="#1、举例说明" class="headerlink" title="1、举例说明"></a>1、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性</span></span><br><span class="line">	<span class="keyword">public</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> $age = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//成员方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$this-&gt;name&#125;</span>的年龄是<span class="subst">&#123;$this-&gt;age&#125;</span>岁&quot;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="类的成员属性"><a href="#类的成员属性" class="headerlink" title="类的成员属性"></a>类的成员属性</h4><h5 id="1、成员属性介绍"><a href="#1、成员属性介绍" class="headerlink" title="1、成员属性介绍"></a>1、成员属性介绍</h5><p>类中只有两个内容，分别为：成员属性和成员方法。类的成员就是对象，因此，又称为“对象属性”“对象方法”。</p>
<h5 id="2、访问修饰符"><a href="#2、访问修饰符" class="headerlink" title="2、访问修饰符"></a>2、访问修饰符</h5><p>作用：主要用来保护数据的安全。<br>✔public(公共权限)：在任何地方都可以访问，主要指类内部、类外部、子类中都可以访问。<br>✔protected(受保护的权限)：只能在本类中、子类中被访问，在类外不能访问。<br>✔private(私有的权限)：只能在本类中被访问，在类外、子类中都无权访问。</p>
<h4 id="类的成员方法"><a href="#类的成员方法" class="headerlink" title="类的成员方法"></a>类的成员方法</h4><h5 id="1、成员方法介绍"><a href="#1、成员方法介绍" class="headerlink" title="1、成员方法介绍"></a>1、成员方法介绍</h5><p>✔成员方法，就是普通函数</p>
<p>✔成员方法可以省略权限控制符，默认为 public</p>
<h5 id="2、定义格式"><a href="#2、定义格式" class="headerlink" title="2、定义格式"></a>2、定义格式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//成员方法的定义格式</span></span><br><span class="line">权限控制符 <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params">形参<span class="number">1</span>,形参<span class="number">2</span>,...</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//方法的功能代码；</span></span><br><span class="line">	[<span class="keyword">return</span> 参数]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>











<h5 id="3、举例说明"><a href="#3、举例说明" class="headerlink" title="3、举例说明"></a>3、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student 类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员方法(对象方法)：一个方法完成一个小功能</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$name,$age</span>)</span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		$str = <span class="string">&quot;<span class="subst">&#123;$name&#125;</span>的年龄是<span class="subst">&#123;$age&#125;</span>岁&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="类的实例对象"><a href="#类的实例对象" class="headerlink" title="类的实例对象"></a>类的实例对象</h4><h5 id="1、实例对象含义"><a href="#1、实例对象含义" class="headerlink" title="1、实例对象含义"></a>1、实例对象含义</h5><p>✔类可以产生 N 多个对象</p>
<p>✔用 new 关键字来创建类的对象</p>
<h5 id="2、语法格式"><a href="#2、语法格式" class="headerlink" title="2、语法格式"></a>2、语法格式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建类的对象的语法(类的实例)</span></span><br><span class="line">$obj1 = <span class="keyword">new</span> ClassName;					<span class="comment">//无参数无括号</span></span><br><span class="line">$obj2 = <span class="keyword">new</span> ClassName();				<span class="comment">//无参数有括号</span></span><br><span class="line">$obj3 = <span class="keyword">new</span> ClassName(实参<span class="number">1</span>,实参<span class="number">2.</span>..)	 <span class="comment">//有参数有括号</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3、举例说明-1"><a href="#3、举例说明-1" class="headerlink" title="3、举例说明"></a>3、举例说明</h5><p>注意：对象不能单独存在，对象必须归属于哪个类。没有类，一定没有对象</p>
<h4 id="对象属性的操作"><a href="#对象属性的操作" class="headerlink" title="对象属性的操作"></a>对象属性的操作</h4><h5 id="1、对象属性的操作：增加、删除、修改、读取"><a href="#1、对象属性的操作：增加、删除、修改、读取" class="headerlink" title="1、对象属性的操作：增加、删除、修改、读取"></a>1、对象属性的操作：增加、删除、修改、读取</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义一个Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性:对象属性</span></span><br><span class="line">	<span class="keyword">public</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> $age = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//类的实例</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//(1)修改对象的属性：对已存在的属性重新赋值</span></span><br><span class="line"><span class="comment">//$obj-&gt;$name表示访问$name变量的属性</span></span><br><span class="line"><span class="comment">//$obj访问属性，属性不加$符号</span></span><br><span class="line">$obj-&gt;name = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">$obj-&gt;age = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//(2)添加属性：给不存在的属性赋值</span></span><br><span class="line">$obj-&gt;edu = <span class="string">&quot;c&quot;</span>;</span><br><span class="line">$obj-&gt;city = <span class="string">&quot;BeiJing&quot;</span>;</span><br><span class="line"><span class="comment">//(3)删除属性</span></span><br><span class="line"><span class="keyword">unset</span>($obj-&gt;edu,$obj-&gt;city);</span><br><span class="line"><span class="comment">//(4)读取对象属性值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$obj-&gt;name&#125;</span>的年龄是<span class="subst">&#123;$obj-&gt;age&#125;</span>岁&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="伪变量-this使用"><a href="#伪变量-this使用" class="headerlink" title="伪变量$this使用"></a>伪变量$this使用</h4><h5 id="1、-this变量含义"><a href="#1、-this变量含义" class="headerlink" title="1、$this变量含义"></a>1、$this变量含义</h5><p>✔PHP 中$this 变量代表当前对象。</p>
<p>✔$this 代表当前对象，用来调用对象的属性和方法</p>
<p>✔$this 只能在成员方法中存在，其它地方都不能使用</p>
<h5 id="2、举例说明"><a href="#2、举例说明" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义一个Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//成员属性：对象属性</span></span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> $age = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//私有的成员方法 ： 放置一条水平线</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">showLine</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//成员方法：对象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$str = <span class="string">&quot;&lt;h2&gt;<span class="subst">&#123;$this-&gt;name&#125;</span>的基本信息如下&lt;/h2&gt;&quot;</span>;</span><br><span class="line">		$str .= <span class="keyword">$this</span>-&gt;showLine();</span><br><span class="line">		$str .= <span class="string">&quot;<span class="subst">&#123;$this-&gt;name&#125;</span>的年龄是<span class="subst">&#123;$this-&gt;age&#125;</span>岁&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student;</span><br><span class="line">$obj-&gt;showInfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/234654132.PNG" alt="234654132"></p>
<h4 id="定义类的常量"><a href="#定义类的常量" class="headerlink" title="定义类的常量"></a>定义类的常量</h4><h5 id="1、类常量介绍"><a href="#1、类常量介绍" class="headerlink" title="1、类常量介绍"></a>1、类常量介绍</h5><p>✔常量：值就是值永远不变的量，常量不能修改，常量也不能删除</p>
<p>✔类常量定义使用 const 关键字。define()定义的常量为全局常量</p>
<p>✔类常量，只能通过类名来调用( 类名:: 常量)；成员的东西，只能通过对象来调用</p>
<p>✔访问类常量，是通过 范围解析符(::)来访问类的常量。例如：Student::TITLE</p>
<p>✔类常量在内存中只有一份，不会随着对象的增加而增加。类常量可以被所有对象共享</p>
<h5 id="2、定义格式-1"><a href="#2、定义格式-1" class="headerlink" title="2、定义格式"></a>2、定义格式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*类常量的定义格式</span></span><br><span class="line"><span class="comment">const 常量名 = 常量值</span></span><br><span class="line"><span class="comment">语法说明:</span></span><br><span class="line"><span class="comment">(1)常量没有权限访问符</span></span><br><span class="line"><span class="comment">(2)const定义的常量，一般认为局部常量</span></span><br><span class="line"><span class="comment">(3)常量名不加$符号，尽量全大写</span></span><br><span class="line"><span class="comment">(4)常量的值，必须是一个固定的值</span></span><br><span class="line"><span class="comment">?&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3、举例说明-2"><a href="#3、举例说明-2" class="headerlink" title="3、举例说明"></a>3、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">//类常量</span></span><br><span class="line">    <span class="keyword">const</span> DB_HOST = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> DB_USER = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">    <span class="keyword">const</span> DB_PASS = <span class="string">&quot;password&quot;</span>;</span><br><span class="line">    <span class="comment">//公共的成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $str = <span class="string">&quot;主机名: &quot;</span>.Student::DB_HOST;</span><br><span class="line">        $str .= <span class="string">&quot;&lt;br&gt;用户名: &quot;</span>.Student::DB_USER;</span><br><span class="line">        $str .= <span class="string">&quot;&lt;br&gt;密码: &quot;</span>.Student::DB_PASS;</span><br><span class="line">        <span class="keyword">echo</span> $str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接访问类的常量:静态化调用方式</span></span><br><span class="line">$str = <span class="string">&quot;主机名: &quot;</span>.Student::DB_HOST;</span><br><span class="line">$str .= <span class="string">&quot;&lt;br&gt;用户名: &quot;</span>.Student::DB_USER;</span><br><span class="line">$str .= <span class="string">&quot;&lt;br&gt;密码: &quot;</span>.Student::DB_PASS;</span><br><span class="line"><span class="keyword">echo</span> $str.<span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line">$obj-&gt;showInfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_11-17-56.png" alt="Snipaste_2020-01-12_11-17-56"></p>
<h4 id="静态属性和静态方法"><a href="#静态属性和静态方法" class="headerlink" title="静态属性和静态方法"></a>静态属性和静态方法</h4><h5 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h5><p>✔static 关键字修饰的属性，就是静态属性；</p>
<p>✔static 关键字修饰的方法，就是静态方法；</p>
<p>✔静态属性和静态方法，是通过“类名::静态属性或静态方法”方式来访问的</p>
<p>✔静态属性的值是可以改变的，可以被所有对象共享</p>
<p>✔静态属性和静态方法，是有权限限制的。</p>
<h5 id="2、举例说明-1"><a href="#2、举例说明-1" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//公共的静态属性(类的属性)</span></span><br><span class="line">	<span class="built_in">static</span> <span class="keyword">public</span> $title = <span class="string">&quot;&lt;h1&gt;This is A title&lt;/h1&gt;&quot;</span>;</span><br><span class="line">	<span class="comment">//私有的静态方法(类的方法)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showLine</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//公共的成员方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$name,$age</span>)</span>&#123;</span><br><span class="line">		$str = Student::$title;</span><br><span class="line">		$str .= Student::showLine();</span><br><span class="line">		$str .= <span class="string">&quot;<span class="subst">&#123;$name&#125;</span>的年龄是<span class="subst">&#123;$age&#125;</span>岁&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj1 = <span class="keyword">new</span> Student();</span><br><span class="line">$obj1-&gt;showInfo(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br><span class="line">$obj2 = <span class="keyword">new</span> Student();</span><br><span class="line">$obj2-&gt;showInfo(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_11-24-20.png" alt="Snipaste_2020-01-12_11-24-20"></p>
<h5 id="3、self关键字"><a href="#3、self关键字" class="headerlink" title="3、self关键字"></a>3、self关键字</h5><p>✔$this 代表当前对象，self 代表当前类</p>
<p>✔$this 用来调用对象的东西：成员属性、成员方法；</p>
<p>✔self 用来调用类的东西：类常量、静态属性、静态方法；</p>
<p>✔$this 使用箭头(-&gt;)来调用成员属性、成员方法；</p>
<p>✔self 使用(::)来调用类常量、静态属性、静态方法；</p>
<p>✔$this 只能用在成员方法中；self 可以用在成员方法、静态方法中；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//公共的静态属性(类的属性)</span></span><br><span class="line">	<span class="built_in">static</span> <span class="keyword">public</span> $title = <span class="string">&quot;&lt;h1&gt;This is A title&lt;/h1&gt;&quot;</span>;</span><br><span class="line">	<span class="comment">//私有的静态方法(类的方法)</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showLine</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//公共的成员方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$name,$age</span>)</span>&#123;</span><br><span class="line">		$str = <span class="built_in">self</span>::$title;</span><br><span class="line">		$str .= <span class="built_in">self</span>::showLine();</span><br><span class="line">		$str .= <span class="string">&quot;<span class="subst">&#123;$name&#125;</span>的年龄是<span class="subst">&#123;$age&#125;</span>岁&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj1 = <span class="keyword">new</span> Student();</span><br><span class="line">$obj1-&gt;showInfo(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br><span class="line">$obj2 = <span class="keyword">new</span> Student();</span><br><span class="line">$obj2-&gt;showInfo(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_11-24-20-1578799560023.png" alt="Snipaste_2020-01-12_11-24-20"></p>
<h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><h5 id="1、什么是析构方法"><a href="#1、什么是析构方法" class="headerlink" title="1、什么是析构方法"></a>1、什么是析构方法</h5><p>✔当销毁一个对象前，自动调用的方法，就是析构方法；</p>
<p>✔析构方法的名称是固定的：__destruct()</p>
<p>✔析构方法一定没有参数，析构方法一定是成员中方法；</p>
<p>✔析构方法的作用：垃圾回收。例如：可以断开数据库的连接、在线人数等</p>
<h5 id="2、语法格式-1"><a href="#2、语法格式-1" class="headerlink" title="2、语法格式"></a>2、语法格式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//析构方法的定义格式</span></span><br><span class="line">权限控制符 <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	垃圾回收的功能代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3、举例说明：对象什么时候销毁"><a href="#3、举例说明：对象什么时候销毁" class="headerlink" title="3、举例说明：对象什么时候销毁"></a>3、举例说明：对象什么时候销毁</h5><p>✔网页执行完毕，所有变量自动销毁，包含对象变量。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;对象即将销毁!&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student;</span><br><span class="line"><span class="keyword">unset</span>($obj);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;这是网页的最后一行代码&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_11-30-08.png" alt="Snipaste_2020-01-12_11-30-08"></p>
<p>✔手动销毁变量，使用 unset()函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;对象即将销毁&lt;br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建学生类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student;</span><br><span class="line"><span class="keyword">unset</span>($obj);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;这是网页的最后一行代码&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_13-35-32.png" alt="Snipaste_2020-01-12_13-35-32"></p>
<h4 id="OOP-中内存的分配情况"><a href="#OOP-中内存的分配情况" class="headerlink" title="OOP  中内存的分配情况"></a>OOP  中内存的分配情况</h4><h5 id="1、值传递"><a href="#1、值传递" class="headerlink" title="1、值传递"></a>1、值传递</h5><p>PHP有8种数据类型：</p>
<p>✔标量数据类型：字符串型、整型、浮点型、布尔型</p>
<p>✔复合数据类型：数组、对象</p>
<p>✔特殊数据类型：资源、NULL</p>
<p>其中，字符串型、整型、浮点型、布尔型、数组，默认都是“值传递”。<br>其中，对象、资源，默认都是“引用传递”。</p>
<p>值传递定义：将一个变量的“值”，复制一份，传递给另一个变量；两个变量之间没有任何关系；<br>修改其中一个变量的值，另一个变量不会改变。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//(1)值传递：将变量的值，复制给另外一个变量；</span></span><br><span class="line">$a = <span class="number">100</span>;</span><br><span class="line">$b = $a;		<span class="comment">//将$a的值，复制了一份，传给$b</span></span><br><span class="line">$a = <span class="number">200</span>;		<span class="comment">//重新给$a赋值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\$a=<span class="subst">$a</span>,\$b=<span class="subst">$b</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_13-37-32.png" alt="Snipaste_2020-01-12_13-37-32"></p>
<h5 id="2、引用传递"><a href="#2、引用传递" class="headerlink" title="2、引用传递"></a>2、引用传递</h5><p>“引用传地址”将一个变量的“数据地址”，复制一份，传递给另一个变量；两个变量指向了“同一数据”；<br>修改其中一个变量的数据，另一个变量也会一起变。</p>
<p>PHP 中默认的“引用传地址”的数据类型是：对象和资源。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//(2)引用传地址</span></span><br><span class="line"><span class="comment">//定义一个Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> $age = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类的对象</span></span><br><span class="line">$obj1 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//将$obj的“数据地址”复制一份,传给$obj2</span></span><br><span class="line">$obj2 = $obj1;</span><br><span class="line"><span class="comment">//给$obj2的属性重新赋值</span></span><br><span class="line">$obj2-&gt;name = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">$obj2-&gt;age = <span class="number">2</span>;</span><br><span class="line">var_dump(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">var_dump($obj1);</span><br><span class="line">var_dump(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line">var_dump($obj2);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_13-41-09.png" alt="Snipaste_2020-01-12_13-41-09"></p>
<p>“引用传地址”在内存中的表现形式？</p>
<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4156464.PNG" alt="4156464"></p>
<h4 id="类的封装性"><a href="#类的封装性" class="headerlink" title="类的封装性"></a>类的封装性</h4><h5 id="1、什么是类的封装性"><a href="#1、什么是类的封装性" class="headerlink" title="1、什么是类的封装性"></a>1、什么是类的封装性</h5><p>✔类的封装性：将敏感数据保护起来，不被外界访问。</p>
<p>✔类的封装性实现，就是通过权限控制符来实现</p>
<p>✔在项目中，所有成员属性，一般都是 private、protected 权限</p>
<h5 id="2、访问权限修饰符介绍"><a href="#2、访问权限修饰符介绍" class="headerlink" title="2、访问权限修饰符介绍"></a>2、访问权限修饰符介绍</h5><p>✔public(公共权限)：在任何地方都可以被访问，主要是：类内、类外、子类中。</p>
<p>✔protected(受保护的权限)：只能在本类、子类中被访问。在类外禁止访问。</p>
<p>✔private(私有权限)：只能在本类中被访问。</p>
<p>✔成员属性、静态属性必须要加权限控制符，不能省略。</p>
<p>✔成员方法、静态方法可以不加权限控制符，默认为 public。建议都要加权限。</p>
<h5 id="3、举例说明-类的封装性"><a href="#3、举例说明-类的封装性" class="headerlink" title="3、举例说明(类的封装性)"></a>3、举例说明(类的封装性)</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span></span>&#123;</span><br><span class="line">	<span class="comment">//类常量定义</span></span><br><span class="line">	<span class="keyword">const</span> COMPANY = <span class="string">&quot;&lt;h2&gt;Title&lt;/h2&gt;&quot;</span>;</span><br><span class="line">	<span class="comment">//私有的静态的保存数量的属性</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">static</span> $count = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//私有的图书属性</span></span><br><span class="line">	<span class="keyword">private</span> $name;</span><br><span class="line">	<span class="keyword">private</span> $author;</span><br><span class="line">	<span class="keyword">private</span> $price;</span><br><span class="line">	<span class="comment">//构造方法：对象初始化</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$arr</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $arr[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;author = $arr[<span class="string">&#x27;author&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;price = $arr[<span class="string">&#x27;price&#x27;</span>];</span><br><span class="line">		<span class="built_in">self</span>::$count++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//水平线</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showLine</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&lt;hr /&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//公共的自我显示的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$str = <span class="built_in">self</span>::COMPANY;</span><br><span class="line">		$str .= <span class="built_in">self</span>::showLine();</span><br><span class="line">		$str .= <span class="string">&quot;Book Name: <span class="subst">&#123;$this-&gt;name&#125;</span>&quot;</span>;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt; author: <span class="subst">&#123;$this-&gt;name&#125;</span>&quot;</span>;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt; price: <span class="subst">&#123;$this-&gt;price&#125;</span>&quot;</span>;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt; There are &quot;</span>.<span class="built_in">self</span>::$count.<span class="string">&quot;Book now&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建第一个对象</span></span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;PHP从入门到放弃&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;author&#x27;</span> =&gt; <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;price&#x27;</span> =&gt; <span class="string">&#x27;100.00&#x27;</span>,</span><br><span class="line">);</span><br><span class="line">$obj1 = <span class="keyword">new</span> Book($arr);</span><br><span class="line"><span class="keyword">echo</span> $obj1-&gt;showInfo();</span><br><span class="line"><span class="comment">//创建第二个对象</span></span><br><span class="line">$arr2 = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;Mysql 从入门到跑路&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;author&#x27;</span> =&gt; <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;price&#x27;</span> =&gt; <span class="string">&#x27;200.00&#x27;</span>,</span><br><span class="line">);</span><br><span class="line">$obj2 = <span class="keyword">new</span> Book($arr2);</span><br><span class="line"><span class="keyword">echo</span> $obj2-&gt;showInfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_14-52-16.png" alt="Snipaste_2020-01-12_14-52-16"></p>
<h4 id="类的继承性"><a href="#类的继承性" class="headerlink" title="类的继承性"></a>类的继承性</h4><h5 id="1、继承的相关概念"><a href="#1、继承的相关概念" class="headerlink" title="1、继承的相关概念"></a>1、继承的相关概念</h5><p>✔继承：如果一个 B 类拥有了 A 类的所有特征信息，则我们就认为 B 类继承了 A 类</p>
<p>✔为什么继承？继承是为了实现功能的升级和扩展。</p>
<p>✔如果项目需要升级和扩展功能， 不能直接修改原类</p>
<h5 id="2、继承的语法格式"><a href="#2、继承的语法格式" class="headerlink" title="2、继承的语法格式"></a>2、继承的语法格式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//继承的语法格式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span> <span class="title">ParentClass</span></span>&#123;</span><br><span class="line">	<span class="comment">//子类的功能代码</span></span><br><span class="line">&#125;</span><br><span class="line">语法说明：</span><br><span class="line">（<span class="number">1</span>）subCLass代表是要创建的子类的名称</span><br><span class="line">（<span class="number">2</span>）<span class="keyword">extends</span> 是继承的关键字，不区分大小写</span><br><span class="line">（<span class="number">3</span>）ParentClass代表已经存在的父类或上层类</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3、单继承的简单演示"><a href="#3、单继承的简单演示" class="headerlink" title="3、单继承的简单演示"></a>3、单继承的简单演示</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> TITLE = <span class="string">&quot;&lt;h2&gt;Title&lt;/h2&gt;&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> $count = <span class="number">60</span>;</span><br><span class="line">	<span class="keyword">public</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> $age = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$str = <span class="built_in">self</span>::TITLE;</span><br><span class="line">		$str .= <span class="string">&quot;<span class="subst">&#123;$this-&gt;name&#125;</span>的年龄是<span class="subst">&#123;$this-&gt;age&#125;</span>岁&quot;</span>;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;一共有&quot;</span>.<span class="built_in">self</span>::$count.<span class="string">&quot;个学生&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个学生类，并继承学生类</span></span><br><span class="line"><span class="comment">//继承：将父类的所有内容全部拿过来，一个不剩的(除private权限外)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//创建学生类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> ItcastStudent;</span><br><span class="line">$obj-&gt;showInfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/465646.PNG" alt="465646"></p>
<h5 id="4、构造方法和析构方法的继承"><a href="#4、构造方法和析构方法的继承" class="headerlink" title="4、构造方法和析构方法的继承"></a>4、构造方法和析构方法的继承</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义一个Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//私有的成员属性</span></span><br><span class="line">	<span class="keyword">private</span> $name;</span><br><span class="line">	<span class="keyword">private</span> $age;</span><br><span class="line">	<span class="comment">//构造方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name2,$age2</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name2;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;age = $age2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//公共的自我显示的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$this-&gt;name&#125;</span>的年龄是<span class="subst">&#123;$this-&gt;age&#125;</span>岁!&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个ItcastStudent类，并继承Student类</span></span><br><span class="line"><span class="comment">//继承：将父类的所有内容全部拿过来，一个不剩的(除private权限外)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItcastStudet</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//创建学生类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> ItcastStudet(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br><span class="line">$obj-&gt;showInfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/49449494.PNG" alt="49449494"></p>
<h5 id="5、parent关键字"><a href="#5、parent关键字" class="headerlink" title="5、parent关键字"></a>5、parent关键字</h5><p>✔self 代表当前类，parent 代表父类</p>
<p>✔self 可以调用本类的内容：类常量、静态属性、静态方法、成员方法；</p>
<p>✔parent 可以调用父类的内容：类常量、静态属性、静态方法、成员方法；</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义一个Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> TITLE = <span class="string">&quot;Title&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="built_in">static</span> $db_host = <span class="string">&quot;localhost&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">readMe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;这是静态方法&quot;</span>.<span class="keyword">__METHOD__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;这是成员方法&quot;</span>.<span class="keyword">__METHOD__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个ItStudent类继承Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">intro</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;这是成员方法&quot;</span>.<span class="keyword">__METHOD__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$str = <span class="string">&quot;父类的常量：&quot;</span>.<span class="built_in">parent</span>::TITLE;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;子类的常量&quot;</span>.<span class="built_in">self</span>::TITLE;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;父类的静态属性：&quot;</span>.<span class="built_in">parent</span>::$db_host;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;子类的静态属性：&quot;</span>.<span class="built_in">self</span>::$db_host;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;父类的静态方法：&quot;</span>.<span class="built_in">parent</span>::readMe();</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;子类的静态方法：&quot;</span>.<span class="built_in">self</span>::readMe();</span><br><span class="line">		<span class="keyword">echo</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> ItStudent;</span><br><span class="line">$obj-&gt;show();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4165456.PNG" alt="4165456"></p>
<h4 id="类的多态"><a href="#类的多态" class="headerlink" title="类的多态"></a>类的多态</h4><h5 id="1、什么是类的多态"><a href="#1、什么是类的多态" class="headerlink" title="1、什么是类的多态"></a>1、什么是类的多态</h5><p>✔类的多态，就是的类的多种形态</p>
<p>✔类的多态，主要指方法重载和方法重写；</p>
<p>✔方法重写：父类有一个方法，在子类用同样的名称再定义一次</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>)</span>&#123;&#125; <span class="comment">//php不支持函数重名或方法重名</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/5646+.PNG" alt="5646+"></p>
<h5 id="2、方法重写的要求"><a href="#2、方法重写的要求" class="headerlink" title="2、方法重写的要求"></a>2、方法重写的要求</h5><p>✔子类中重写的方法名称，要与父类方法名称一致</p>
<p>✔子类中重写的方法的权限，不能低于父类方法的权限。</p>
<p>  如果父类方法权限为 public，则重写方法必须是 public；<br>  如果父类方法权限为 protected，则重写方法必须是 public、protected；<br>  如果父类方法权限为 private，则子类无法继承，无法继承。</p>
<h5 id="3、举例说明-3"><a href="#3、举例说明-3" class="headerlink" title="3、举例说明"></a>3、举例说明</h5><p>//重写前提：必须先继承在重写</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//受保护的静态方法</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$a,$b</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;<span class="subst">&#123;$a&#125;</span>的年龄是<span class="subst">&#123;$b&#125;</span>岁&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//重写父类的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$name,$age</span>)</span>&#123;</span><br><span class="line">		$str = <span class="string">&quot;&lt;h1&gt;Title&lt;/h1&gt;&quot;</span>;</span><br><span class="line">		$str .= <span class="built_in">parent</span>::showInfo($name,$age);</span><br><span class="line">		<span class="keyword">echo</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//直接使用类名调用静态方法</span></span><br><span class="line">ItStudent::showInfo(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/4999.PNG" alt="4999"></p>
<h5 id="4、构造方法重写"><a href="#4、构造方法重写" class="headerlink" title="4、构造方法重写"></a>4、构造方法重写</h5><p>所有方法都可重写，但是，构造方法重写，没有参数个数要求，也就是参数个数可以不对等。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义商品类（基础类）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shop</span></span>&#123;</span><br><span class="line">	<span class="comment">//私有的商品属性</span></span><br><span class="line">	<span class="keyword">private</span> $name;</span><br><span class="line">	<span class="keyword">private</span> $price;</span><br><span class="line">	<span class="comment">//受保护的构造方法</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name2,$price2</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = $name2;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;price = $price2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//受保护的自我显示的方法</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$str = <span class="string">&quot;商品名称：<span class="subst">&#123;$this-&gt;name&#125;</span>&quot;</span>;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;商品价格:<span class="subst">&#123;$this-&gt;price&#125;</span>&quot;</span>;</span><br><span class="line">		<span class="keyword">return</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义手机类，并继承商品类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mobile</span> <span class="keyword">extends</span> <span class="title">Shop</span></span>&#123;</span><br><span class="line">	<span class="comment">//私有的手机属性</span></span><br><span class="line">	<span class="keyword">private</span> $pinpai;</span><br><span class="line">	<span class="keyword">private</span> $city;</span><br><span class="line">	<span class="comment">//公共的构造方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params">$name2,$price2,$pinpai2,$city2</span>)</span>&#123;</span><br><span class="line">		<span class="comment">//调用父类的构造方法，并传递参数</span></span><br><span class="line">		<span class="built_in">parent</span>::__construct($name2,$price2);</span><br><span class="line">		<span class="keyword">$this</span>-&gt;pinpai = $pinpai2;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;city = $city2;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//公共的自我显示方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$str = <span class="built_in">parent</span>::showInfo();</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;手机品牌: <span class="subst">&#123;$this-&gt;pinpai&#125;</span>&quot;</span>;</span><br><span class="line">		$str .= <span class="string">&quot;&lt;br&gt;手机产地: <span class="subst">&#123;$this-&gt;city&#125;</span>&quot;</span>;</span><br><span class="line">		<span class="keyword">echo</span> $str;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建手机类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Mobile(<span class="string">&quot;Apple18&quot;</span>,<span class="string">&quot;8888.00&quot;</span>,<span class="string">&quot;Apple&quot;</span>,<span class="string">&quot;cisco&quot;</span>);</span><br><span class="line">$obj-&gt;showInfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/65465161.PNG" alt="65465161"></p>
<h4 id="最终类和最终方法"><a href="#最终类和最终方法" class="headerlink" title="最终类和最终方法"></a>最终类和最终方法</h4><h5 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h5><p>✔Final 关键字修饰的类，就是最终类；</p>
<p>✔Final 关键字修饰的方法，就是最终方法；</p>
<p>✔最终类：该类不能被继承，直接实例化</p>
<p>✔最终方法：该方法不能被重写，直接调用即可</p>
<h5 id="2、举例说明-2"><a href="#2、举例说明-2" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义最终类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">Class</span> <span class="title">Db</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//继承最终类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db2</span> <span class="keyword">extends</span> <span class="title">Db</span></span>&#123;&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_10-37-53.png" alt="Snipaste_2020-01-12_10-37-53"></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">	<span class="keyword">final</span> <span class="keyword">public</span> funcion showInfo()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//继承Db类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db2</span> <span class="keyword">extends</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">	<span class="comment">//重写最终方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_10-41-07.png" alt="Snipaste_2020-01-12_10-41-07"></p>
<h4 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h4><h5 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h5><p>✔Abstract 关键字修饰的类，就是抽象类；</p>
<p>✔Abstract 关键字修饰的方法，就是抽象方法；</p>
<p>✔抽象类：该类只能被继承，不能直接实例化。</p>
<p>✔抽象方法：该方法没有方法体，抽象方法必须先继承，后重写。</p>
<h5 id="2、举例说明-3"><a href="#2、举例说明-3" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义抽象Shop类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shop</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> TITLE = <span class="string">&quot;Title&quot;</span>;</span><br><span class="line">	<span class="comment">//抽象方法</span></span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$a,$b</span>)</span>;</span><br><span class="line">	<span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">readMe</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Mobile类，并继承商品基础类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Mobile</span> <span class="keyword">extends</span> <span class="title">Shop</span></span>&#123;</span><br><span class="line">	<span class="comment">//重写showInfo()抽象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$name,$age</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;<span class="subst">&#123;$name&#125;</span>的年龄是<span class="subst">&#123;$age&#125;</span>岁！&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//重写readMe()抽象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readMe</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;这是成员方法: &quot;</span>.<span class="keyword">__METHOD__</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;当前函数是：&quot;</span>.<span class="keyword">__FUNCTION__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> Mobile();</span><br><span class="line">$obj-&gt;showInfo(<span class="string">&quot;a&quot;</span>,<span class="number">1</span>);</span><br><span class="line">$obj-&gt;readMe();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_10-48-06.png" alt="Snipaste_2020-01-12_10-48-06"></p>
<h4 id="接口技术"><a href="#接口技术" class="headerlink" title="接口技术"></a>接口技术</h4><h5 id="1、接口定义"><a href="#1、接口定义" class="headerlink" title="1、接口定义"></a>1、接口定义</h5><p>✔PHP 只支持单继承</p>
<p>✔接口就是特殊的抽象类</p>
<p>✔interface 关键字，用来声明一个接口。</p>
<p>✔implements 关键字，创建一个子类，来实现接口</p>
<p>✔接口中只能存在两样东西：类常量、抽象方法</p>
<p>✔接口中的方法，默认都是抽象方法，因此，不加 abstract 关键字</p>
<p>✔接口中方法的权限，必须是 publi</p>
<p>✔接口中所有的抽象方法，在子类中必须要重写；</p>
<p>✔接口中的常量不能重写，只能继承</p>
<h5 id="2、举例说明-4"><a href="#2、举例说明-4" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//(1)定义第1个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter1</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> TITLE = <span class="string">&quot;Title&quot;</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$a,$b</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(2)定义第2个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter2</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">readMe</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(3)创建抽象的学生类，并实现多个接口</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Inter1</span>,<span class="title">Inter2</span></span>&#123;</span><br><span class="line">	<span class="comment">//重写接口的showInfo()方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params">$name,$age</span>)</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//重写接口中的readMe()方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">readMe</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(4)创建ItStudent类，并继承抽象类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ItStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//(5)创建ItStudent类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> ItStudent();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="3、举例说明-4"><a href="#3、举例说明-4" class="headerlink" title="3、举例说明"></a>3、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">XiaoLingTong</span></span>&#123;</span><br><span class="line">	<span class="comment">//打电话</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tel</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mp3</span></span>&#123;</span><br><span class="line">	<span class="comment">//听音乐</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">music</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义Mp4接口，并且继承Mp3接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Mp4</span> <span class="keyword">extends</span> <span class="title">Mp3</span></span>&#123;</span><br><span class="line">	<span class="comment">//看电影</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">film</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义类并实现继承多个接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mobile</span> <span class="keyword">implements</span> <span class="title">XiaoLingTong</span>,<span class="title">Mp4</span></span>&#123;</span><br><span class="line">	<span class="comment">//重写tel()抽象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tel</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;phone!&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//重写music()抽象方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">music</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;listening music&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//定义玩游戏的方法 </span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">game</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;playing games!&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">film</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;watching film&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建手机类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Mobile();</span><br><span class="line">$obj-&gt;tel();</span><br><span class="line">$obj-&gt;music();</span><br><span class="line">$obj-&gt;film();</span><br><span class="line">$obj-&gt;game();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_15-37-46.png" alt="Snipaste_2020-01-12_15-37-46"></p>
<h4 id="自动加载类函数-autload"><a href="#自动加载类函数-autload" class="headerlink" title="自动加载类函数(__autload())"></a>自动加载类函数(__autload())</h4><h5 id="1、类文件的命名规则"><a href="#1、类文件的命名规则" class="headerlink" title="1、类文件的命名规则"></a>1、类文件的命名规则</h5><p>✔将每一个功能，单独定义成一个类文件；</p>
<p>✔每一个类文件，尽量以”.class.php”结尾；例如：Student.class.php</p>
<p>✔类文件的主名，要与类名一致；例如：class Student{}</p>
<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_15-41-20.png" alt="Snipaste_2020-01-12_15-41-20"></p>
<h5 id="2、-autoload-函数的语法"><a href="#2、-autoload-函数的语法" class="headerlink" title="2、__autoload()函数的语法"></a>2、__autoload()函数的语法</h5><p>✔__autoload()是系统函数，不是方法，名称是固定的；</p>
<p>✔当使用一个不存在的类时，__autoload($className)会自动调用</p>
<p>✔函数的内容包含两方面</p>
<p>构建类文件的真实路径；</p>
<p>判断并包含类文件代码；</p>
<h5 id="3、举例说明-5"><a href="#3、举例说明-5" class="headerlink" title="3、举例说明"></a>3、举例说明</h5><p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_16-02-21.png" alt="Snipaste_2020-01-12_16-02-21"></p>
<h4 id="自定义类文件加载函数"><a href="#自定义类文件加载函数" class="headerlink" title="自定义类文件加载函数"></a>自定义类文件加载函数</h4><h5 id="1、描述"><a href="#1、描述" class="headerlink" title="1、描述"></a>1、描述</h5><p>✔__autoload()有点局限性，如果类文件位于不同的目录，类文件名命名方式也不尽相同</p>
<p>✔自定义类文件加载函数：spl_autoload_register()，主要应用在项目中，可以应对不同的情况</p>
<p>✔每个函数就是一种类文件的加载规则。</p>
<h5 id="2、语法格式-2"><a href="#2、语法格式-2" class="headerlink" title="2、语法格式"></a>2、语法格式</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//自定义类文件加载函数spl_autoload_register()语法格式</span></span><br><span class="line"><span class="comment">//参数：是函数，有两种情况</span></span><br><span class="line"><span class="comment">//（1）参数是字符串的函数名称，函数传地址</span></span><br><span class="line"><span class="comment">//（2）参数也可以是匿名函数，函数传地址</span></span><br><span class="line">spl_autoload_register(<span class="string">&#x27;func1&#x27;</span>);</span><br><span class="line">spl_autoload_register(<span class="string">&#x27;func2&#x27;</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params">$className</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//构建类文件路径</span></span><br><span class="line">	$filename = <span class="string">&quot;./libs/<span class="subst">$className</span>.class.php&quot;</span>;</span><br><span class="line">	<span class="comment">//如果类文件存在，则包含</span></span><br><span class="line">	<span class="keyword">if</span>(file_exists($filename)) <span class="keyword">require_once</span>($filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params">$className</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//构建类文件路径</span></span><br><span class="line">	$filename = <span class="string">&quot;./public/<span class="subst">$className</span>.class.php&quot;</span>;</span><br><span class="line">	<span class="comment">//如果类文件存在，则包含</span></span><br><span class="line">	<span class="keyword">if</span>(file_exists($filename)) <span class="keyword">require_once</span>($filename);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h4><h5 id="1、什么是对象克隆"><a href="#1、什么是对象克隆" class="headerlink" title="1、什么是对象克隆"></a>1、什么是对象克隆</h5><p>✔创建新对象有几种方式：(1)使用 new 关键字，(2)使用 clone 关键字</p>
<p>✔$obj2 = $obj1 是创建新对象吗？将$obj1 的地址复制给$obj2，$obj1 和$obj2 指向同一份数据。是同一<br>个对象。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义学生类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">//创建学生类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//将$obj1对象的地址，复制给$obj2</span></span><br><span class="line"><span class="comment">//$obj1和$obj2是同一个对象，一个对象不同名字</span></span><br><span class="line">$obj2 = $obj1;</span><br><span class="line">var_dump($obj1,$obj2)</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_16-20-02.png" alt="Snipaste_2020-01-12_16-20-02"></p>
<h5 id="2、举例说明-5"><a href="#2、举例说明-5" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">private</span> $age = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//当对象克隆完成时，魔术方法 __clone()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;name = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;age = <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj1 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//克隆新对象</span></span><br><span class="line">$obj2 = <span class="keyword">clone</span> $obj1;</span><br><span class="line">var_dump($obj1);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">var_dump($obj2);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_16-25-43.png" alt="Snipaste_2020-01-12_16-25-43"></p>
<h5 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="keyword">protected</span> $age = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">public</span> $edu = <span class="string">&quot;senior high school&quot;</span>;</span><br><span class="line">	<span class="comment">//在类中遍历对象所有属性</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showAllAttrs</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">foreach</span> (<span class="keyword">$this</span> <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="string">&quot;\$obj-&gt;<span class="subst">$k</span> = <span class="subst">$v</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//在类外遍历公共的对象属性</span></span><br><span class="line"><span class="keyword">foreach</span>($obj <span class="keyword">as</span> $k=&gt;$v)&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;\$obj-&gt;<span class="subst">$k</span> = <span class="subst">$v</span>&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">$obj-&gt;showAllAttrs();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_16-33-09.png" alt="Snipaste_2020-01-12_16-33-09"></p>
<h4 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h4><h5 id="1、-toString"><a href="#1、-toString" class="headerlink" title="1、__toString()"></a>1、__toString()</h5><p>✔描述：将对象转成字符时，魔术方法__toString()会自动调用</p>
<p>✔语法：public string __toString(void)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//当将对象专成字符串时， __toString()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;对不起，对象不能转成字符串&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//将对象转成字符串，然后输出</span></span><br><span class="line"><span class="keyword">echo</span> $obj;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_16-38-25-1578818350051.png" alt="Snipaste_2020-01-12_16-38-25"></p>
<h5 id="2、-invoke"><a href="#2、-invoke" class="headerlink" title="2、 __invoke()"></a>2、 __invoke()</h5><p>描述:当把对象当成函数调用时，魔术方法__invoke()会自动调用。</p>
<p>语法：mixed __invoke(void)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//当对象当成函数调用,魔术方法__invoke()自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;对象不能当成函数调用&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//把对象当成函数调用</span></span><br><span class="line">$obj();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_16-38-25-1578818710411.png" alt="Snipaste_2020-01-12_16-38-25"></p>
<h4 id="面向对象设计模式"><a href="#面向对象设计模式" class="headerlink" title="面向对象设计模式"></a>面向对象设计模式</h4><h5 id="1、常用的设计模式"><a href="#1、常用的设计模式" class="headerlink" title="1、常用的设计模式"></a>1、常用的设计模式</h5><p>✔单例模式：一个类只能创建一个对象，不管用什么办法，都无法创建第 2 个对象</p>
<p>✔工厂模式：根据传递的不同类名，来创建不同类的对象的工厂</p>
<h5 id="2、单例设计的要求-三私一公"><a href="#2、单例设计的要求-三私一公" class="headerlink" title="2、单例设计的要求(三私一公)"></a>2、单例设计的要求(三私一公)</h5><p>✔一私：私有的静态的保存对象的属性</p>
<p>✔一私：私有的构造方法，阻止类外 new 对象；</p>
<p>✔一私：私有的克隆方法，阻止类外 clone 对象；</p>
<p>✔一公：公共的静态的创建对象的方法。</p>
<h5 id="3、举例说明-6"><a href="#3、举例说明-6" class="headerlink" title="3、举例说明"></a>3、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//创建单例的Db类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">	<span class="comment">//私有的静态保存对象的属性</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">static</span> $obj = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//私有的构造方法：阻止类外new对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//私有的克隆方法：阻止类外clone对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//公共的静态的创建对象的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//判断当前对象是否存在</span></span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">self</span>::$obj <span class="keyword">instanceof</span> <span class="built_in">self</span>)&#123;</span><br><span class="line">			<span class="comment">//如果对象不存在，则创建它</span></span><br><span class="line">			<span class="built_in">self</span>::$obj = <span class="keyword">new</span> <span class="built_in">self</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//返回当前对象</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">self</span>::$obj;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Db类的对象</span></span><br><span class="line">$db1 = Db::getInstance();</span><br><span class="line">$db2 = Db::getInstance();</span><br><span class="line">var_dump($db1,$db2);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-12_16-52-57-1578819198358.png" alt="Snipaste_2020-01-12_16-52-57"></p>
<h5 id="4、instanceof关键字"><a href="#4、instanceof关键字" class="headerlink" title="4、instanceof关键字"></a>4、instanceof关键字</h5><p>✔描述：判断一个对象是不是某个类产生的对象</p>
<p>✔语法：$obj instanceof ClassName</p>
<p>✔返回：如果$obj 是ClassName的对象，则返回TRUE，否则，返回FALSE</p>
<h4 id="学生信息管理"><a href="#学生信息管理" class="headerlink" title="学生信息管理"></a>学生信息管理</h4><h5 id="1、面向对象开发流程"><a href="#1、面向对象开发流程" class="headerlink" title="1、面向对象开发流程"></a>1、面向对象开发流程</h5><p>✔面向过程是以过程为中心的编程思想；面向对象是以事物为中心的编程思想</p>
<p>✔所有类都可以产生 N 多个对象，所有对象都要归属于某个类</p>
<h5 id="2、单例模式（三私一公）"><a href="#2、单例模式（三私一公）" class="headerlink" title="2、单例模式（三私一公）"></a>2、单例模式（三私一公）</h5><p>✔单例模式：一个类只能创建一个对象</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义最终的单例的数据库工具类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">	<span class="comment">//私有的静态的保存对象的属性</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">static</span> $obj = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//私有的构造方法：阻止类外new对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//私有的克隆方法：阻止类外clone对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">	<span class="comment">//公共的静态的创建对象的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//判断当前对象是否存在</span></span><br><span class="line">		<span class="keyword">if</span>(!<span class="built_in">self</span>::$obj <span class="keyword">instanceof</span> <span class="built_in">self</span>)&#123;</span><br><span class="line">			<span class="comment">//如果对象不存在，则创建它</span></span><br><span class="line">			<span class="built_in">self</span>::$obj = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//如果对象存在，直接返回</span></span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">self</span>::$obj;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建数据库类的对象</span></span><br><span class="line">$db1 = Db::getInstance();</span><br><span class="line">$db2 = Db::getInstance();</span><br><span class="line">var_dump($db1,$db2);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/../../../安全/PHP笔记/image/Snipaste_2020-01-13_09-18-33.png" alt="Snipaste_2020-01-13_09-18-33" style="zoom:75%;">



<p>3、数据库操作类主要代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">	<span class="comment">//私有的静态的保存对象的属性</span></span><br><span class="line">	<span class="keyword">private</span> <span class="built_in">static</span> $obj = <span class="literal">NULL</span>:</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//私有的数据库配置信息</span></span><br><span class="line">	<span class="keyword">private</span> $db_host;</span><br><span class="line">	<span class="keyword">private</span> $db_user;</span><br><span class="line">	<span class="keyword">private</span> $db_pass;</span><br><span class="line">	<span class="keyword">private</span> $db_name</span><br><span class="line">	<span class="keyword">private</span> $charset;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//私有的构造方法:阻止类外new对象</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> $config</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_host = $config[<span class="string">&#x27;db_host&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_user = $config[<span class="string">&#x27;db_user&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_pass = $config[<span class="string">&#x27;db_pass&#x27;</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="4、连接数据库的公共文件"><a href="#4、连接数据库的公共文件" class="headerlink" title="4、连接数据库的公共文件"></a>4、连接数据库的公共文件</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//(1)类的自动加载</span></span><br><span class="line">spl_autoload_register(<span class="function"><span class="keyword">function</span>(<span class="params">$className</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//构建类文件的真实路径</span></span><br><span class="line">	$filename = <span class="string">&quot;./libs/<span class="subst">$className</span>.class.php&quot;</span>;</span><br><span class="line">	<span class="comment">//如果类文件存在，则包含</span></span><br><span class="line">	<span class="keyword">if</span>(file_exists($filename)) <span class="keyword">require_once</span>($filename);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//(2)创建数据库类的对象</span></span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;db_host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_user&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_pass&#x27;</span> =&gt; <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_name&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8&#x27;</span>,</span><br><span class="line">);</span><br><span class="line">$db = Db:getInstance($arr);</span><br><span class="line">var_dump($db);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h4><h5 id="1、什么是工厂模式"><a href="#1、什么是工厂模式" class="headerlink" title="1、什么是工厂模式"></a>1、什么是工厂模式</h5><p>工厂模式：根据传递的不同类名，创建不同类的对象；</p>
<h5 id="2、工厂模式的设计要求"><a href="#2、工厂模式的设计要求" class="headerlink" title="2、工厂模式的设计要求"></a>2、工厂模式的设计要求</h5><p>✔工厂类中有一个私有的静态的属性，用来存储不同类的对象；</p>
<p>✔注意：该工厂类不创建对象。工厂类本身不是单例的。</p>
<h4 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h4><h5 id="1、什么是重载"><a href="#1、什么是重载" class="headerlink" title="1、什么是重载"></a>1、什么是重载</h5><p>✔PHP 所提供的”重载”（overloading）是指动态地”创建”类属性和方法。我们是通过魔术方法来实现的</p>
<p>✔所有的重载方法都必须被声明为 public。</p>
<p>✔这些魔术方法的参数都不能通过引用传递</p>
<h5 id="2、属性重载"><a href="#2、属性重载" class="headerlink" title="2、属性重载"></a>2、属性重载</h5><p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_13-56-56.png" alt="Snipaste_2020-01-13_13-56-56"></p>
<p>(1) __set()</p>
<p>✔描述:在给不可访问属性赋值时，__set()会被调用</p>
<p>✔语法:public void __set(string $name,mixed $value)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name;</span><br><span class="line">	<span class="keyword">private</span> $age;</span><br><span class="line">	<span class="comment">//当给不可访问的属性赋值时， __set()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params">$name,$value</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;$name = $value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//给不可访问的属性赋值</span></span><br><span class="line">$obj-&gt;name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">$obj-&gt;age = <span class="number">1</span>;</span><br><span class="line">var_dump($obj);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_14-02-47.png" alt="Snipaste_2020-01-13_14-02-47"></p>
<p>(2) __get()</p>
<p>✔描述:读取不可访问属性的值， __get()会被调用</p>
<p>✔语法:public mixed __get(string $name)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="comment">//当读取不可访问属性的值时， __get()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params">$name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">$this</span>-&gt;$name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//读取私有属性的值</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;my name is: <span class="subst">&#123;$obj-&gt;name&#125;</span>&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_14-18-35.png" alt="Snipaste_2020-01-13_14-18-35"></p>
<p>(3) __isset()</p>
<p>✔描述： 当对不可访问属性调用 unset()时， __unset()会被调用</p>
<p>✔语法：public void __unset(string $name)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="comment">//当对私有属性使用isset()或empty()操作时，__isset()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params">$name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;不能对私有属性使用isset()或empty()&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//判断私有属性是否存在</span></span><br><span class="line"><span class="keyword">isset</span>($obj-&gt;name);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_15-19-14.png" alt="Snipaste_2020-01-13_15-19-14"></p>
<p>(4) __unset()</p>
<p>✔描述：当对不可访问属性调用 unset() 时，__unset()会被调用</p>
<p>✔语法：public void __unset ( string $name )</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">	<span class="comment">//当对私有属性使用unset()操作时，__unset()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params">$name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;不能对私有属性使用unset()!&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//删除私有属性</span></span><br><span class="line"><span class="keyword">unset</span>($obj-&gt;name);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_15-58-04.png" alt="Snipaste_2020-01-13_15-58-04"></p>
<h5 id="3、方法重载"><a href="#3、方法重载" class="headerlink" title="3、方法重载"></a>3、方法重载</h5><p>(1) __call()</p>
<p>✔描述：在对象中调用一个不可访问方法时，__call() 会被调用</p>
<p>✔语法：public mixed __call ( string $name , array $arguments )</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//当调用不可访问的方法时，__call()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params">$func,$args</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;方法<span class="subst">&#123;$func&#125;</span>(&quot;</span>.implode(<span class="string">&#x27;,&#x27;</span>,$args).<span class="string">&quot;)不存在或者不可访问! &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//调用一个不可访问的方法</span></span><br><span class="line">$obj-&gt;showInfo(<span class="string">&#x27;100&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_16-03-18.png" alt="Snipaste_2020-01-13_16-03-18"></p>
<p>（2）__callStatic()</p>
<p>✔描述:用静态方法中调用一个不可访问的方法时, __callStatic()会被调用</p>
<p>✔语法:public static mixed __callStatic(string $name,array $arguments)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//当使用静态化方式，调用一个不可访问的静态方法时</span></span><br><span class="line">	<span class="comment">//__callStatic()会自动调用</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params">$func,$args</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;静态方法<span class="subst">&#123;$func&#125;</span>(&quot;</span>.implode(<span class="string">&#x27;,&#x27;</span>,$args).<span class="string">&quot;)不存在或不可访问&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用静态化方式，访问一个静态方法</span></span><br><span class="line">Student::showInfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_16-10-10.png" alt="Snipaste_2020-01-13_16-10-10"></p>
<h4 id="静态延迟绑定"><a href="#静态延迟绑定" class="headerlink" title="静态延迟绑定"></a>静态延迟绑定</h4><h5 id="1、什么是静态延迟绑定"><a href="#1、什么是静态延迟绑定" class="headerlink" title="1、什么是静态延迟绑定"></a>1、什么是静态延迟绑定</h5><p>✔自 PHP 5.3.0 起，PHP 增加了一个叫做后期静态绑定的功能，用于在继承范围内引用静态调用的类。<br>“后期绑定”的意思是说，static::不再被解析为定义当前方法所在的类，而是在实际运行时计算的。也可以称之为”静态绑定”，因为它可以用于（但不限于）静态方法的调用。</p>
<p>✔语法：static::静态属性，静态方法，成员方法，类常量</p>
<h5 id="2、举例说明-6"><a href="#2、举例说明-6" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="keyword">const</span> TITLE = <span class="string">&quot;Title&quot;</span>;</span><br><span class="line">	<span class="comment">//如果只有一个类，self和static都代表当前类</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;班级名称：&quot;</span>.<span class="built_in">self</span>::TITLE;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;班级名称: &quot;</span>.<span class="built_in">static</span>::TITLE;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line">$obj-&gt;showInfo();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_16-15-07.png" alt="Snipaste_2020-01-13_16-15-07"></p>
<h4 id="类型约束"><a href="#类型约束" class="headerlink" title="类型约束"></a>类型约束</h4><h5 id="1、类型约束简介"><a href="#1、类型约束简介" class="headerlink" title="1、类型约束简介"></a>1、类型约束简介</h5><p>✔PHP 的类型约束有三种：数组约束、对象约束、接口约束。</p>
<h5 id="2、举例说明-7"><a href="#2、举例说明-7" class="headerlink" title="2、举例说明"></a>2、举例说明</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//函数或方法参数的类型限定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">$a,<span class="keyword">array</span> $b,Student $c,Inter2 $d</span>)</span>&#123;</span><br><span class="line">	<span class="comment">//$a可以时任意类型</span></span><br><span class="line">	<span class="comment">//$b只能时数组</span></span><br><span class="line">	<span class="comment">//$c必须时Student类的实例</span></span><br><span class="line">	<span class="comment">//$d必须时Inter2接口的实例</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Inter2</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Inter2</span></span>&#123;&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> Student();</span><br><span class="line">$arr = <span class="keyword">array</span>();</span><br><span class="line">abc(<span class="number">100</span>,$arr,$obj,$obj);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_16-19-39.png" alt="Snipaste_2020-01-13_16-19-39"></p>
<h4 id="常用的魔术常量"><a href="#常用的魔术常量" class="headerlink" title="常用的魔术常量"></a>常用的魔术常量</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">✔ <span class="keyword">__LINE__</span>，当前行号</span><br><span class="line">✔ <span class="keyword">__FILE__</span>，当前文件名</span><br><span class="line">✔ <span class="keyword">__DIR__</span>，当前目录名</span><br><span class="line">✔ <span class="keyword">__FUNCTION__</span>，当前函数名</span><br><span class="line">✔ <span class="keyword">__CLASS__</span>，当前类名</span><br><span class="line">✔ <span class="keyword">__METHOD__</span>，当前方法</span><br><span class="line">✔ <span class="keyword">__NAMESPACE__</span>，当前空间名(在 PDO 中讲)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义Student类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建当前类的对象</span></span><br><span class="line">	<span class="comment">//!类名不能时常量，只能时变量</span></span><br><span class="line">	<span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		$className = <span class="keyword">__CLASS__</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> $className;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//显示信息</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">showInfo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;当前行号：&quot;</span>.<span class="keyword">__LINE__</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;当前文件：&quot;</span>.<span class="keyword">__FILE__</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;当前目录：&quot;</span>.<span class="keyword">__DIR__</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;当前类名：&quot;</span>.<span class="keyword">__CLASS__</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;当前函数名：&quot;</span>.<span class="keyword">__FUNCTION__</span>;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;当前方法名：&quot;</span>.<span class="keyword">__METHOD__</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建Student类对象</span></span><br><span class="line">$obj = Student::getInstance();</span><br><span class="line">$obj-&gt;showInfo();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_16-26-26.png" alt="Snipaste_2020-01-13_16-26-26"></p>
<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><h5 id="1、什么是序列化"><a href="#1、什么是序列化" class="headerlink" title="1、什么是序列化"></a>1、什么是序列化</h5><p>✔变量序列化: 将变量转成可储存或传输的字符串的过程，会保留类型和结构</p>
<p>✔变量反序化:将序列化的字符串，再还原成原始变量</p>
<p>✔除了资源变量外，其它变量都可以序列化</p>
<h5 id="2、serialize"><a href="#2、serialize" class="headerlink" title="2、serialize()"></a>2、serialize()</h5><p>✔描述:产生一个可储存的值的表示</p>
<p>✔语法：string serialize (mixed $value)</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义数组变量</span></span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;db_host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_user&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_pass&#x27;</span> =&gt; <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_name&#x27;</span> =&gt; <span class="string">&#x27;mysql&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">//变量序列化</span></span><br><span class="line">$str = serialize($arr);</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_16-35-24.png" alt="Snipaste_2020-01-13_16-35-24"></p>
<h5 id="3、unserialize"><a href="#3、unserialize" class="headerlink" title="3、unserialize()"></a>3、unserialize()</h5><p>✔描述：从已储存的表示中创建PHP的值</p>
<p>✔语法：mixed unserialize(string $str)</p>
<h5 id="4、对象序列化"><a href="#4、对象序列化" class="headerlink" title="4、对象序列化"></a>4、对象序列化</h5><p>✔对象的序列化过程,与其它变量数据一样</p>
<p>✔__sleep()魔术方法功能：此功能可以用于清理对象，并返回一个包含对象中所有应被序列化的变量名称的数组</p>
<p>✔对象序列化的内容只能包含成员属性，不能包含常量、静态属性、成员方法、静态方法</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义最终的数据库工具类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $db_host;</span><br><span class="line">	<span class="keyword">private</span> $db_user;</span><br><span class="line">	<span class="keyword">private</span> $db_pass;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> $config</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_host = $config[<span class="string">&#x27;db_host&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_user = $config[<span class="string">&#x27;db_user&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_pass = $config[<span class="string">&#x27;db_pass&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;connectDb();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//连接Mysql服务器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connectDb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!@mysql_connect(<span class="keyword">$this</span>-&gt;db_host,<span class="keyword">$this</span>-&gt;db_user,<span class="keyword">$this</span>-&gt;db_pass))</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&quot;PHP 连接MySQL服务器失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在对象序列化前,自动调用的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//返回需要序列的对象属性，不需要不写</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;db_host&quot;</span>,<span class="string">&quot;db_user&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建数据库类的对象</span></span><br><span class="line">$arr = <span class="keyword">array</span>(</span><br><span class="line">	<span class="string">&#x27;db_host&#x27;</span> =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_user&#x27;</span> =&gt; <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">	<span class="string">&#x27;db_pass&#x27;</span> =&gt; <span class="string">&#x27;password&#x27;</span>,</span><br><span class="line">);</span><br><span class="line">$db = <span class="keyword">new</span> Db($arr);</span><br><span class="line"><span class="comment">//对象序列化</span></span><br><span class="line">$str = serialize($db);</span><br><span class="line"><span class="keyword">echo</span> $str;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_16-45-38.png" alt="Snipaste_2020-01-13_16-45-38"></p>
<h5 id="5、反序列化"><a href="#5、反序列化" class="headerlink" title="5、反序列化"></a>5、反序列化</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">对象的反序列化过程，与其它变量数据一样；</span><br><span class="line">若反序列化的变量是一个对象，在成功地重新构造对象之后，PHP 会自动地试图去调用 __wakeup()成员函数（如果存在的话）。</span><br><span class="line">unserialize() 会检查是否存在一个 __wakeup()方法。如果存在，则会先调用 __wakeup 方法，预先准备对象需要的资源</span><br><span class="line">__wakeup() 经常用在反序列化操作中，进行一些初始化操作，例如重新建立数据库连接，或执行其它初始化操作。</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//定义最终类的数据库工具类</span></span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Db</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> $db_host;</span><br><span class="line">	<span class="keyword">private</span> $db_user;</span><br><span class="line">	<span class="keyword">private</span> $db_pass;</span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">array</span> $config</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_host = $config[<span class="string">&#x27;db_host&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_user = $config[<span class="string">&#x27;db_user&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_pass = $config[<span class="string">&#x27;db_pass&#x27;</span>];</span><br><span class="line">		<span class="keyword">$this</span>-&gt;connectDb();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//连接MySQL服务器</span></span><br><span class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connectDb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!@mysql_connect(<span class="keyword">$this</span>-&gt;db_host,<span class="keyword">$this</span>-&gt;db_user,<span class="keyword">$this</span>-&gt;db_pass))</span><br><span class="line">			<span class="keyword">die</span>(<span class="string">&quot;PHP 连接MySQL服务器失败&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在对象序列化前，自动调用的方法</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="comment">//返回需要序列化的对象属性，不需要不写</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;db_host&quot;</span>,<span class="string">&quot;db_user&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//在对象成功重构后， __wakeup()会自动调用</span></span><br><span class="line">	<span class="comment">//对象初始化</span></span><br><span class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;db_pass = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">		<span class="keyword">$this</span>-&gt;connectDb();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">$str = file_get_contents(<span class="string">&quot;2.txt&quot;</span>);</span><br><span class="line">$db = unserialize($str);</span><br><span class="line">var_dump($db);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>





<h4 id="常用类和对象的操作函数"><a href="#常用类和对象的操作函数" class="headerlink" title="常用类和对象的操作函数"></a>常用类和对象的操作函数</h4><p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_17-03-36.png" alt="Snipaste_2020-01-13_17-03-36"></p>
<h5 id="1、判断类、接口、方法属性是否存在"><a href="#1、判断类、接口、方法属性是否存在" class="headerlink" title="1、判断类、接口、方法属性是否存在"></a>1、判断类、接口、方法属性是否存在</h5><p>✔class_exists()        判断类是否存在</p>
<p>✔interface_exists()    判断接口是否存在</p>
<p>✔method_exists()    判断方法是否存在</p>
<p>✔property_exists()    判断属性是否存在</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(class_exists(<span class="string">&quot;Student&quot;</span>))&#123;</span><br><span class="line">	<span class="comment">//如果类存在，则创建对象</span></span><br><span class="line">	$obj = <span class="keyword">new</span> Student();</span><br><span class="line">	var_dump($obj);</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;Student 类不存在&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_17-07-16.png" alt="Snipaste_2020-01-13_17-07-16"></p>
<h5 id="2、获取类名"><a href="#2、获取类名" class="headerlink" title="2、获取类名"></a>2、获取类名</h5><p>✔get_class()根据对象返回类名</p>
<p>✔get_parent_class()返回父类名称</p>
<p>检查一个变量是不是对象 is_object()</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ItStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;&#125;</span><br><span class="line">$obj = <span class="keyword">new</span> ItStudent();</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;类名为: &quot;</span>.get_class($obj);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;父类名为: &quot;</span>.get_parent_class($obj);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2020/09/26/php%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/Snipaste_2020-01-13_17-13-05.png" alt="Snipaste_2020-01-13_17-13-05"></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
